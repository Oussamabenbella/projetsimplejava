# Configuration pour Render (production)
server.port=${PORT:8080}
spring.application.name=travel-destinations-api

# Configuration PostgreSQL - utilisation directe des variables d'environnement
spring.datasource.url=${spring.datasource.url}
spring.datasource.username=${spring.datasource.username}
spring.datasource.password=${spring.datasource.password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration pour production
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.show-sql=false

# Flyway Migration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true

# OpenAPI / Swagger
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Actuator endpoints
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=never

# Logging
logging.level.org.springframework=WARN
logging.level.com.example=INFO

# Cache
spring.cache.type=caffeine

# CORS Configuration
spring.web.cors.allowed-origins=https://*.onrender.com,https://*.example.com
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE
spring.web.cors.allowed-headers=*

# Optimisations pour la production
server.compression.enabled=true
server.http2.enabled=true
spring.resources.cache.cachecontrol.max-age=86400
spring.resources.chain.strategy.content.enabled=true
spring.resources.chain.compressed=true
